Terminals unused in grammar

   INTEGER
   REAL


State 6 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: REAL_NUMBER
    3       | INTEGER_NUMBER
    4       | f_expr
    5       | STRING
    6       | QUIT
    7       | error
    8       | SYMBOL
    9       | LPAREN let_section s_expr RPAREN
   10       | LPAREN COND s_expr s_expr s_expr RPAREN

   11 f_expr: LPAREN FUNC s_expr_list RPAREN
   12       | LPAREN SYMBOL s_expr_list RPAREN

   13 s_expr_list: s_expr s_expr_list
   14            | %empty

   15 let_section: LPAREN let_list RPAREN
   16            | %empty

   17 let_list: let_list let_elem
   18         | LET let_elem

   19 let_elem: LPAREN TYPE SYMBOL s_expr RPAREN
   20         | LPAREN SYMBOL s_expr RPAREN
   21         | LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
   22         | LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

   23 arg_list: arg_elem arg_list
   24         | arg_elem

   25 arg_elem: SYMBOL


Terminals, with rules where they appear

$end (0) 0
error (256) 7
FUNC (258) 11
SYMBOL (259) 8 12 19 20 21 22 25
TYPE (260) 19 21
STRING (261) 5
REAL_NUMBER (262) 2
INTEGER_NUMBER (263) 3
LPAREN (264) 9 10 11 12 15 19 20 21 22
RPAREN (265) 9 10 11 12 15 19 20 21 22
LET (266) 18
EOL (267) 1
QUIT (268) 6
INTEGER (269)
REAL (270)
COND (271) 10
LAMBDA (272) 21 22


Nonterminals, with rules where they appear

$accept (18)
    on left: 0
program (19)
    on left: 1, on right: 0
s_expr (20)
    on left: 2 3 4 5 6 7 8 9 10, on right: 1 9 10 13 19 20 21 22
f_expr (21)
    on left: 11 12, on right: 4
s_expr_list (22)
    on left: 13 14, on right: 11 12 13
let_section (23)
    on left: 15 16, on right: 9
let_list (24)
    on left: 17 18, on right: 15 17
let_elem (25)
    on left: 19 20 21 22, on right: 17 18
arg_list (26)
    on left: 23 24, on right: 21 22 23
arg_elem (27)
    on left: 25, on right: 23 24


State 0

    0 $accept: . program $end

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    STRING          shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    INTEGER_NUMBER  shift, and go to state 5
    LPAREN          shift, and go to state 6
    QUIT            shift, and go to state 7

    program  go to state 8
    s_expr   go to state 9
    f_expr   go to state 10


State 1

    7 s_expr: error .

    $default  reduce using rule 7 (s_expr)


State 2

    8 s_expr: SYMBOL .

    $default  reduce using rule 8 (s_expr)


State 3

    5 s_expr: STRING .

    $default  reduce using rule 5 (s_expr)


State 4

    2 s_expr: REAL_NUMBER .

    $default  reduce using rule 2 (s_expr)


State 5

    3 s_expr: INTEGER_NUMBER .

    $default  reduce using rule 3 (s_expr)


State 6

    9 s_expr: LPAREN . let_section s_expr RPAREN
   10       | LPAREN . COND s_expr s_expr s_expr RPAREN
   11 f_expr: LPAREN . FUNC s_expr_list RPAREN
   12       | LPAREN . SYMBOL s_expr_list RPAREN

    FUNC    shift, and go to state 11
    SYMBOL  shift, and go to state 12
    LPAREN  shift, and go to state 13
    COND    shift, and go to state 14

    SYMBOL    [reduce using rule 16 (let_section)]
    LPAREN    [reduce using rule 16 (let_section)]
    $default  reduce using rule 16 (let_section)

    let_section  go to state 15


State 7

    6 s_expr: QUIT .

    $default  reduce using rule 6 (s_expr)


State 8

    0 $accept: program . $end

    $end  shift, and go to state 16


State 9

    1 program: s_expr . EOL

    EOL  shift, and go to state 17


State 10

    4 s_expr: f_expr .

    $default  reduce using rule 4 (s_expr)


State 11

   11 f_expr: LPAREN FUNC . s_expr_list RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    STRING          shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    INTEGER_NUMBER  shift, and go to state 5
    LPAREN          shift, and go to state 6
    QUIT            shift, and go to state 7

    RPAREN  reduce using rule 14 (s_expr_list)

    s_expr       go to state 18
    f_expr       go to state 10
    s_expr_list  go to state 19


State 12

   12 f_expr: LPAREN SYMBOL . s_expr_list RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    STRING          shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    INTEGER_NUMBER  shift, and go to state 5
    LPAREN          shift, and go to state 6
    QUIT            shift, and go to state 7

    RPAREN  reduce using rule 14 (s_expr_list)

    s_expr       go to state 18
    f_expr       go to state 10
    s_expr_list  go to state 20


State 13

   15 let_section: LPAREN . let_list RPAREN

    LET  shift, and go to state 21

    let_list  go to state 22


State 14

   10 s_expr: LPAREN COND . s_expr s_expr s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    STRING          shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    INTEGER_NUMBER  shift, and go to state 5
    LPAREN          shift, and go to state 6
    QUIT            shift, and go to state 7

    s_expr  go to state 23
    f_expr  go to state 10


State 15

    9 s_expr: LPAREN let_section . s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    STRING          shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    INTEGER_NUMBER  shift, and go to state 5
    LPAREN          shift, and go to state 6
    QUIT            shift, and go to state 7

    s_expr  go to state 24
    f_expr  go to state 10


State 16

    0 $accept: program $end .

    $default  accept


State 17

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


State 18

   13 s_expr_list: s_expr . s_expr_list

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    STRING          shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    INTEGER_NUMBER  shift, and go to state 5
    LPAREN          shift, and go to state 6
    QUIT            shift, and go to state 7

    RPAREN  reduce using rule 14 (s_expr_list)

    s_expr       go to state 18
    f_expr       go to state 10
    s_expr_list  go to state 25


State 19

   11 f_expr: LPAREN FUNC s_expr_list . RPAREN

    RPAREN  shift, and go to state 26


State 20

   12 f_expr: LPAREN SYMBOL s_expr_list . RPAREN

    RPAREN  shift, and go to state 27


State 21

   18 let_list: LET . let_elem

    LPAREN  shift, and go to state 28

    let_elem  go to state 29


State 22

   15 let_section: LPAREN let_list . RPAREN
   17 let_list: let_list . let_elem

    LPAREN  shift, and go to state 28
    RPAREN  shift, and go to state 30

    let_elem  go to state 31


State 23

   10 s_expr: LPAREN COND s_expr . s_expr s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    STRING          shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    INTEGER_NUMBER  shift, and go to state 5
    LPAREN          shift, and go to state 6
    QUIT            shift, and go to state 7

    s_expr  go to state 32
    f_expr  go to state 10


State 24

    9 s_expr: LPAREN let_section s_expr . RPAREN

    RPAREN  shift, and go to state 33


State 25

   13 s_expr_list: s_expr s_expr_list .

    $default  reduce using rule 13 (s_expr_list)


State 26

   11 f_expr: LPAREN FUNC s_expr_list RPAREN .

    $default  reduce using rule 11 (f_expr)


State 27

   12 f_expr: LPAREN SYMBOL s_expr_list RPAREN .

    $default  reduce using rule 12 (f_expr)


State 28

   19 let_elem: LPAREN . TYPE SYMBOL s_expr RPAREN
   20         | LPAREN . SYMBOL s_expr RPAREN
   21         | LPAREN . TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
   22         | LPAREN . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 34
    TYPE    shift, and go to state 35


State 29

   18 let_list: LET let_elem .

    $default  reduce using rule 18 (let_list)


State 30

   15 let_section: LPAREN let_list RPAREN .

    $default  reduce using rule 15 (let_section)


State 31

   17 let_list: let_list let_elem .

    $default  reduce using rule 17 (let_list)


State 32

   10 s_expr: LPAREN COND s_expr s_expr . s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    STRING          shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    INTEGER_NUMBER  shift, and go to state 5
    LPAREN          shift, and go to state 6
    QUIT            shift, and go to state 7

    s_expr  go to state 36
    f_expr  go to state 10


State 33

    9 s_expr: LPAREN let_section s_expr RPAREN .

    $default  reduce using rule 9 (s_expr)


State 34

   20 let_elem: LPAREN SYMBOL . s_expr RPAREN
   22         | LPAREN SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    STRING          shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    INTEGER_NUMBER  shift, and go to state 5
    LPAREN          shift, and go to state 6
    QUIT            shift, and go to state 7
    LAMBDA          shift, and go to state 37

    s_expr  go to state 38
    f_expr  go to state 10


State 35

   19 let_elem: LPAREN TYPE . SYMBOL s_expr RPAREN
   21         | LPAREN TYPE . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 39


State 36

   10 s_expr: LPAREN COND s_expr s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 40


State 37

   22 let_elem: LPAREN SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 41


State 38

   20 let_elem: LPAREN SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 42


State 39

   19 let_elem: LPAREN TYPE SYMBOL . s_expr RPAREN
   21         | LPAREN TYPE SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    STRING          shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    INTEGER_NUMBER  shift, and go to state 5
    LPAREN          shift, and go to state 6
    QUIT            shift, and go to state 7
    LAMBDA          shift, and go to state 43

    s_expr  go to state 44
    f_expr  go to state 10


State 40

   10 s_expr: LPAREN COND s_expr s_expr s_expr RPAREN .

    $default  reduce using rule 10 (s_expr)


State 41

   22 let_elem: LPAREN SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 45

    arg_list  go to state 46
    arg_elem  go to state 47


State 42

   20 let_elem: LPAREN SYMBOL s_expr RPAREN .

    $default  reduce using rule 20 (let_elem)


State 43

   21 let_elem: LPAREN TYPE SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 48


State 44

   19 let_elem: LPAREN TYPE SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 49


State 45

   25 arg_elem: SYMBOL .

    $default  reduce using rule 25 (arg_elem)


State 46

   22 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 50


State 47

   23 arg_list: arg_elem . arg_list
   24         | arg_elem .

    SYMBOL  shift, and go to state 45

    $default  reduce using rule 24 (arg_list)

    arg_list  go to state 51
    arg_elem  go to state 47


State 48

   21 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 45

    arg_list  go to state 52
    arg_elem  go to state 47


State 49

   19 let_elem: LPAREN TYPE SYMBOL s_expr RPAREN .

    $default  reduce using rule 19 (let_elem)


State 50

   22 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    STRING          shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    INTEGER_NUMBER  shift, and go to state 5
    LPAREN          shift, and go to state 6
    QUIT            shift, and go to state 7

    s_expr  go to state 53
    f_expr  go to state 10


State 51

   23 arg_list: arg_elem arg_list .

    $default  reduce using rule 23 (arg_list)


State 52

   21 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 54


State 53

   22 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 55


State 54

   21 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    STRING          shift, and go to state 3
    REAL_NUMBER     shift, and go to state 4
    INTEGER_NUMBER  shift, and go to state 5
    LPAREN          shift, and go to state 6
    QUIT            shift, and go to state 7

    s_expr  go to state 56
    f_expr  go to state 10


State 55

   22 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 22 (let_elem)


State 56

   21 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 57


State 57

   21 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 21 (let_elem)
